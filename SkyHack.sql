-- TO MAKE THE LOCAL_INFILE 'ON' FOR IMPORTING FILES LOCALLY THROUGH THE COMPUTER
SHOW VARIABLES LIKE 'local_infile';
SET GLOBAL local_infile = 1;

-- TO IMPORT THE PNR_FLIGHT_DATA IN OUR SQL FILE
CREATE TABLE pnr_flight_data (
    company_id CHAR(2),
    flight_number INT,
    scheduled_departure_date_local DATE,
    scheduled_departure_station_code CHAR(3),
    scheduled_arrival_station_code CHAR(3),
    pnr_number VARCHAR(50),
    pnr_creation_date DATE,
    total_pax INT,
    is_child CHAR(1),
    basic_economy_ind CHAR(1),
    is_stroller_user CHAR(1),
    lap_child_count INT,
    days_in_advance INT
);

-- Optional: speed up import for large file
SET FOREIGN_KEY_CHECKS = 0;
SET UNIQUE_CHECKS = 0;
SET AUTOCOMMIT = 0;

LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/pnr_flight_cleaned.csv'
INTO TABLE pnr_flight_data
CHARACTER SET utf8mb4
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 LINES
(
  company_id,
  flight_number,
  scheduled_departure_date_local,
  scheduled_departure_station_code,
  scheduled_arrival_station_code,
  pnr_number,
  pnr_creation_date,
  total_pax,
  is_child,
  basic_economy_ind,
  is_stroller_user,
  lap_child_count,
  days_in_advance
);

COMMIT;

SET AUTOCOMMIT = 1;
SET UNIQUE_CHECKS = 1;
SET FOREIGN_KEY_CHECKS = 1;

-- TO RENAME SOME OF THE COLUMNS OF THE TABLES TO AVOID DUPLICATE NAMES
ALTER TABLE pnr_remark
RENAME COLUMN pnr_created_on TO PNR_CREATION_ON, 
RENAME COLUMN FLIGHT_NUMBER TO PR_FLIGHT_NUMBER;

-- CORRECTING THE DATA TYPE OF THE COLUMN 'PNR_CREATION_ON' OF THE TABLE - 'PNR_REMARK' 
SELECT STR_TO_DATE(PNR_CREATION_ON, '%Y-%m-%d') AS PNR_CREATION_ON
FROM pnr_remark;

-- TURNING OFF SAFE UPDATES SO THAT WE DONT HAVE TO APPROVE EVERYTIME WE UPDATE THE TABLE
SET SQL_SAFE_UPDATES = 0;

-- UPDATING THE DATA TYPE IN THE TABLE 
UPDATE pnr_remark
SET PNR_CREATION_ON = STR_TO_DATE(PNR_CREATION_ON, '%d-%m-%Y');

ALTER TABLE pnr_remark
MODIFY COLUMN PNR_CREATION_ON DATE;

-- TO CHECK AND ANALYZE THE DATA MANUALLY AND TO OBSERVE FOR SANITY CHECKS
SELECT COUNT(*), RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER FROM PNR_REMARK
GROUP BY RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER;

-- TO CHECK THE IF ANY DUPLICATE DATA IS PRESENT OR NOT IN THE TABLE - PNR_REMARK
SELECT RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER, SPECIAL_SERVICE_REQUEST, COUNT(*) AS DUP_COUNT
FROM PNR_REMARK
GROUP BY RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER, SPECIAL_SERVICE_REQUEST
HAVING DUP_COUNT > 1; 

-- TO CHECK THE IF ANY DUPLICATE DATA IS PRESENT OR NOT IN THE TABLE - PNR_FLIGHT_DATA
SELECT PNR_NUMBER, FLIGHT_NUMBER, PNR_CREATION_DATE, COUNT(*) AS dup_count
FROM PNR_FLIGHT_DATA
GROUP BY PNR_NUMBER, FLIGHT_NUMBER, PNR_CREATION_DATE
HAVING dup_count > 1;

-- TO JOIN THE TWO TABLES PNR_FLIGHT_DATA AND PNR_REMARK
WITH ALL_PAX_REMARK AS (
SELECT * FROM PNR_FLIGHT_DATA AS PF
LEFT JOIN PNR_REMARK AS PR ON PF.PNR_NUMBER = PR.RECORD_LOCATOR AND PF.PNR_CREATION_DATE = PR.PNR_CREATION_ON AND PF.FLIGHT_NUMBER = PR.PR_FLIGHT_NUMBER 
)
SELECT * FROM ALL_PAX_REMARK;

-- TO SEE WHICH ARRIVAL STATION HAS THE MOST DELAY
SELECT scheduled_arrival_station_code, AVG(ARRIVAL_DELAY_MINUTES) AS AVG_ARRIVAL_DELAY
FROM FLIGHT_LEVEL_DATA
GROUP BY SCHEDULED_ARRIVAL_STATION_CODE
ORDER BY AVG(ARRIVAL_DELAY_MINUTES) DESC
LIMIT 1;

-- TO CHECK THE IF ANY DUPLICATE DATA IS PRESENT OR NOT IN THE TABLE - FLIGHT_LEVEL_DATA
SELECT FLIGHT_NUMBER, SCHEDULED_DEPARTURE_DATE_LOCAL, scheduled_departure_time, SCHEDULED_ARRIVAL_STATION_CODE, FLEET_TYPE, COUNT(*) AS DUP_COUNT
FROM flight_level_data
GROUP BY FLIGHT_NUMBER, SCHEDULED_DEPARTURE_DATE_LOCAL, scheduled_departure_time, SCHEDULED_ARRIVAL_STATION_CODE, FLEET_TYPE
HAVING DUP_COUNT > 1;

-- TO CHECK IF THE DEPARTURE OF THE FLIGHT IS DELAYED
SELECT CASE WHEN ACTUAL_DEPARTURE_TIME_LOCAL - SCHEDULED_DEPARTURE_TIME >= 10 THEN 'Y' ELSE 'N' END AS FLIGHT_DEPARTURE_DELAYED
FROM FLIGHT_LEVEL_DATA;

-- TO CHECK IF THE ARRIVAL OF THE FLIGHT IS DELAYED
SELECT CASE WHEN ACTUAL_ARRIVAL_TIME_LOCAL - SCHEDULED_ARRIVAL_TIME_LOCAL >= 10 THEN 'Y' ELSE 'N' END AS FLIGHT_ARRIVAL_DELAYED
FROM FLIGHT_LEVEL_DATA;

-- TO CLEAN THE TABLE - PNR_REMARK, REMOVED FALSE ENTRIES
WITH SERVICE_REQUEST AS (
	SELECT RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER, SPECIAL_SERVICE_REQUEST
	FROM PNR_REMARK AS PR
	LEFT JOIN (
		SELECT DISTINCT FLIGHT_NUMBER, COMPANY_ID
		FROM FLIGHT_LEVEL_DATA
	) AS FL
	ON PR.PR_FLIGHT_NUMBER = FL.FLIGHT_NUMBER
	WHERE FLIGHT_NUMBER IS NOT NULL
);
-- SELECT COUNT(*) FROM PNR_REMARK;


CREATE TABLE PNR_REMARK_FINAL (
    RECORD_LOCATOR VARCHAR(50),
    PNR_CREATION_ON DATE,
    PR_FLIGHT_NUMBER INT,
    SPECIAL_SERVICE_REQUEST VARCHAR(255)
);

LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/PNR_REMARK_FINAL.csv'
INTO TABLE PNR_REMARK_FINAL
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER, SPECIAL_SERVICE_REQUEST);

SELECT COUNT(*) FROM PNR_REMARK_FINAL;

SELECT *
FROM PNR_FLIGHT_DATA AS PF
LEFT JOIN pnr_remark_final AS PRF ON PF.PNR_NUMBER = PRF.RECORD_LOCATOR
GROUP BY PRF.SPECIAL_SERVICE_REQUEST
ORDER BY PNR_NUMBER;

SELECT SPECIAL_SERVICE_REQUEST, COUNT(*) FROM PNR_REMARK_FINAL GROUP BY SPECIAL_SERVICE_REQUEST;

SELECT * FROM pnr_remark_final ORDER BY RECORD_LOCATOR;

-- TO RENAME SOME OF THE COLUMNS THAT ARE DUPLICATES AMONG OTHER TABLES
ALTER TABLE PNR_REMARK_FINAL
MODIFY COLUMN RECORD_LOCATOR INT;

ALTER TABLE PNR_FLIGHT_DATA
MODIFY COLUMN PNR_NUMBER  INT;

-- TO CHECK IF THE TABLE - BAG_TAG_DATA CONTAINS ANY DUPLICATE
SELECT FLIGHT_NUMBER, scheduled_departure_date_local, scheduled_departure_station_code, bag_tag_unique_number, bag_tag_issue_date, COUNT(*) AS DUP_COUNT
FROM bag_tag_data
GROUP BY FLIGHT_NUMBER, scheduled_departure_date_local, scheduled_departure_station_code, bag_tag_unique_number, bag_tag_issue_date
HAVING DUP_COUNT > 1;
SELECT *
FROM bag_tag_data;

-- TO RENAME SOME OF THE COLUMNS THAT ARE DUPLICATES AMONG OTHER TABLES
ALTER TABLE BAG_TAG_DATA
RENAME COLUMN FLIGHT_NUMBER TO BT_FLIGHT_NUMBER;
ALTER TABLE BAG_TAG_DATA
RENAME COLUMN COMPANY_ID TO BT_COMPANY_ID;

-- TO CLEAN THE TABLE - BAG_TAG_DATA, REMOVED FALSE ENTRIES
WITH BAG_DATA AS (
	SELECT BT_COMPANY_ID, BT_FLIGHT_NUMBER, scheduled_departure_date_local, scheduled_departure_station_code, scheduled_arrival_station_code, bag_tag_unique_number, bag_tag_issue_date, bag_type, checkin_time_before_departure_inDays
	FROM bag_tag_data AS BT
	LEFT JOIN (
		SELECT DISTINCT FLIGHT_NUMBER, COMPANY_ID
		FROM flight_level_data
	) AS FL
	ON BT.BT_FLIGHT_NUMBER = FL.FLIGHT_NUMBER
	WHERE FL.FLIGHT_NUMBER IS NOT NULL
)
SELECT * FROM BAG_DATA;

-- TO IMPORT THE CLEANED BAG_DATA FILE
CREATE TABLE bag_tag_final (
    BT_COMPANY_ID VARCHAR(10),
    BT_FLIGHT_NUMBER VARCHAR(10),
    scheduled_departure_date_local DATE,
    scheduled_departure_station_code VARCHAR(10),
    scheduled_arrival_station_code VARCHAR(10),
    bag_tag_unique_number BIGINT,
    bag_tag_issue_date DATE,
    bag_type VARCHAR(50),
    checkin_time_before_departure_inDays INT
);

LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/bag_tag_final.csv'
INTO TABLE bag_tag_final
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
IGNORE 1 ROWS
(BT_COMPANY_ID, BT_FLIGHT_NUMBER, scheduled_departure_date_local,
 scheduled_departure_station_code, scheduled_arrival_station_code,
 bag_tag_unique_number, bag_tag_issue_date, bag_type, checkin_time_before_departure_inDays);
 
 SELECT COUNT(*) FROM BAG_TAG_FINAL;

-- TO FIND THE NUMBER OF BAGS PER FLIGHT
SELECT BT_FLIGHT_NUMBER, SCHEDULED_DEPARTURE_DATE_LOCAL, SCHEDULED_ARRIVAL_STATION_CODE, COUNT(*) AS TOTAL_BAGS
FROM BAG_TAG_FINAL
GROUP BY BT_FLIGHT_NUMBER, SCHEDULED_DEPARTURE_DATE_LOCAL, SCHEDULED_ARRIVAL_STATION_CODE;

-- TO FIND THE NUMBER OF PASSENGERS PER FLIGHT
SELECT FLIGHT_NUMBER, SCHEDULED_DEPARTURE_DATE_LOCAL, SCHEDULED_ARRIVAL_STATION_CODE, COUNT(PNR_NUMBER) AS TOTAL_PAX
FROM PNR_FLIGHT_DATA
GROUP BY FLIGHT_NUMBER, SCHEDULED_DEPARTURE_DATE_LOCAL, SCHEDULED_ARRIVAL_STATION_CODE;

SELECT DISTINCT SPECIAL_SERVICE_REQUEST FROM PNR_REMARK_FINAL;

-- TO ORGANIZE THE DATA IN PNR_REMARK_FINAL SO THAT WE CAN MERGE IT WITH PNR_FLIGHT_DATA
SELECT 
    RECORD_LOCATOR,
    PNR_CREATION_ON,
    PR_FLIGHT_NUMBER,
    MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Airport Wheelchair' THEN 'Y' ELSE 'N' END) AS AWCHR,
    MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Unaccompanied Minor' THEN 'Y' ELSE 'N' END) AS UAMR,
    MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Manual Wheelchair' THEN 'Y' ELSE 'N' END) AS MWCHR,
    MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Electric Wheelchair' THEN 'Y' ELSE 'N' END) AS EWCHR
FROM PNR_REMARK_FINAL
GROUP BY RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER;

-- TO CREATE A NEW TABLE BY MERGING THE MODIFIED PNR_REMARK_FINAL AND PNR_FLIGHT_DATA
SELECT *
FROM PNR_FLIGHT_DATA AS PF
LEFT JOIN (
	SELECT 
		RECORD_LOCATOR,
		PNR_CREATION_ON,
		PR_FLIGHT_NUMBER,
		MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Airport Wheelchair' THEN 'Y' ELSE 'N' END) AS AWCHR,
		MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Unaccompanied Minor' THEN 'Y' ELSE 'N' END) AS UAMR,
		MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Manual Wheelchair' THEN 'Y' ELSE 'N' END) AS MWCHR,
		MAX(CASE WHEN SPECIAL_SERVICE_REQUEST = 'Electric Wheelchair' THEN 'Y' ELSE 'N' END) AS EWCHR
	FROM PNR_REMARK_FINAL
	GROUP BY RECORD_LOCATOR, PNR_CREATION_ON, PR_FLIGHT_NUMBER
) AS PR ON PF.PNR_NUMBER = PR.RECORD_LOCATOR AND PF.FLIGHT_NUMBER = PR.PR_FLIGHT_NUMBER
LEFT JOIN `AIRPORTS DATA` AS AD ON PF.SCHEDULED_ARRIVAL_STATION_CODE = AD.Airport_IATA_Code;

SELECT DISTINCT BAG_TYPE FROM bag_tag_final;

-- TO CHANGE THE COLUMNS NAMES THAT ARE DUPLICATE IN THE TABLE - PNR_FLIGHT_DATA
ALTER TABLE PNR_FLIGHT_DATA
RENAME COLUMN FLIGHT_NUMBER TO PF_FLIGHT_NUMBER,
RENAME COLUMN SCHEDULED_DEPARTURE_DATE_LOCAL TO PF_SCHEDULED_DEPARTURE_DATE,
RENAME COLUMN SCHEDULED_ARRIVAL_STATION_CODE TO PF_SCHEDULED_ARRIVAL_STATION;

-- TO CHANGE THE COLUMNS NAMES THAT ARE DUPLICATE IN THE TABLE - BAG_TAG_FINAL
ALTER TABLE BAG_TAG_FINAL
RENAME COLUMN SCHEDULED_DEPARTURE_DATE_LOCAL TO BT_SCHEDULED_DEPARTURE_LOCAL, 
RENAME COLUMN SCHEDULED_ARRIVAL_STATION_CODE TO BT_SCHEDULED_ARRIVAL_STATION;

-- TO ORGANIZE THE TABLE - BAG_TAG_FINAL
SELECT BT_FLIGHT_NUMBER, BT_SCHEDULED_DEPARTURE_LOCAL, BT_SCHEDULED_ARRIVAL_STATION,
	COUNT(*) AS TOTAL_BAGS, 
    SUM(CASE WHEN BAG_TYPE = 'Transfer' THEN 1 ELSE 0 END) AS TRANSFER_BAGGAGE,
    SUM(CASE WHEN BAG_TYPE = 'Origin' THEN 1 ELSE 0 END) AS ORIGIN_BAGGAGE,
    SUM(CASE WHEN BAG_TYPE = 'Hot Transfer' THEN 1 ELSE 0 END) AS HOT_TRANSFER_BAGGAGE, 
    SUM(CASE WHEN CHECKIN_TIME_BEFORE_DEPARTURE_INDAYS >= 1 THEN 1 ELSE 0 END) AS EARLY_CHECKIN
FROM bag_tag_final
GROUP BY BT_FLIGHT_NUMBER, BT_SCHEDULED_DEPARTURE_LOCAL, BT_SCHEDULED_ARRIVAL_STATION;

-- TO ORGANIZE THE TABLE - PNR_FLIGHT_DATA
SELECT PF_FLIGHT_NUMBER, PF_SCHEDULED_DEPARTURE_DATE, PF_SCHEDULED_ARRIVAL_STATION, 
	COUNT(*) AS TOTAL_PASSENGERS, 
    SUM(LAP_CHILD_COUNT) AS TOTAL_LAP_CHILD, 
    SUM(CASE WHEN BASIC_ECONOMY_IND = 'Y' THEN 1 ELSE 0 END) AS TOTAL_BASIC_ECONOMY,
    SUM(CASE WHEN IS_STROLLER_USER = 'Y' THEN 1 ELSE 0 END) AS TOTAL_STROLLER_USERS,
    ROUND(AVG(DAYS_IN_ADVANCE)) AS AVG_ADVANCE_BOOKING,
    SUM(CASE WHEN DAYS_IN_ADVANCE <= 3 THEN 1 ELSE 0 END) AS LAST_MOMENT_BOOKINGS
--     SUM(CASE WHEN AWCHR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_AIRPORT_WHEELCHAIR, 
--     SUM(CASE WHEN UAMR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_UNACCOMPANIED_MINOR,
--     SUM(CASE WHEN MWCHR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_MANUAL_WHEELCHAIR,
--     SUM(CASE WHEN EWCHR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_ELECTRIC_WHEELCHAIR
FROM PNR_FLIGHT_DATA
GROUP BY PF_FLIGHT_NUMBER, PF_SCHEDULED_DEPARTURE_DATE, PF_SCHEDULED_ARRIVAL_STATION;


-- TO IMPORT THE CLEANED FILE OF PNR_FLIGHT_DATA AND PNR_REMARKS COMBINED
CREATE TABLE CLEANED_PNR_FLIGHT (
    company_id VARCHAR(50),
    PF_FLIGHT_NUMBER VARCHAR(50),
    PF_SCHEDULED_DEPARTURE_DATE DATE,
    scheduled_departure_station_code VARCHAR(10),
    PF_SCHEDULED_ARRIVAL_STATION VARCHAR(10),
    pnr_number VARCHAR(50),
    pnr_creation_date DATE,
    total_pax INT,
    is_child VARCHAR(10),
    basic_economy_ind VARCHAR(10),
    is_stroller_user VARCHAR(10),
    lap_child_count INT,
    days_in_advance INT,
    PNR_NUMBER_ONE VARCHAR(50),
    FLIGHT_NUMBER VARCHAR(50),
    SCHEDULED_ARRIVAL_STATION_CODE VARCHAR(10),
    AWCHR VARCHAR(50),
    UAMR VARCHAR(50),
    MWCHR VARCHAR(50),
    EWCHR VARCHAR(50),
    ARRIVAL_CODE VARCHAR(10),
    iso_country_code VARCHAR(10),
    Airport_IATA_Code VARCHAR(10)
);

LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/cleaned_final_1.csv'
INTO TABLE CLEANED_PNR_FLIGHT
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

-- TO CREATE A THE FINAL_DATA TABLE, CONSISTING OF ALL THE ANALYSIS FROM ALL THE TABLES AND ALSO FLIGHT DIFFICULTY SCORE
-- FLIGHT DIFFICULTY SCORE = 0.25*GROUND_TIME_SCORE + 0.25*BAGGAGE_SCORE + 0.25*PASSENGER_SERVICE_SCORE + 0.25*OPERATIONAL_COMPLEXITY
SELECT *,
	ROUND(CASE WHEN MINIMUM_TURN_MINUTES IS NULL OR MINIMUM_TURN_MINUTES <= 0 THEN 0
		ELSE LEAST(1,
           GREATEST(0, (MINIMUM_TURN_MINUTES - LEAST(COALESCE(SCHEDULED_GROUND_TIME_MINUTES,0), COALESCE(ACTUAL_GROUND_TIME_MINUTES,0))) / MINIMUM_TURN_MINUTES))
	END, 2) AS GROUND_TIME_SCORE,
	ROUND(((0.4 * (HOT_TRANSFER_BAGGAGE/TOTAL_BAGS)) + (0.2 * (TRANSFER_BAGGAGE/TOTAL_BAGS)) + (0.4 * ((TOTAL_BAGS - EARLY_CHECKIN)/TOTAL_BAGS))), 2) AS BAGGAGE_SCORE,
    ROUND(((COALESCE(PEOPLE_OPTED_FOR_AIRPORT_WHEELCHAIR, 0) + COALESCE(PEOPLE_OPTED_FOR_UNACCOMPANIED_MINOR, 0) + 
    COALESCE(PEOPLE_OPTED_FOR_MANUAL_WHEELCHAIR, 0) + COALESCE(PEOPLE_OPTED_FOR_ELECTRIC_WHEELCHAIR, 0))/TOTAL_PASSENGERS), 2) AS PASSENGER_SERVICE_SCORE,
    ROUND(LEAST(1, GREATEST(0, departure_delay_minutes / 60)), 2) AS OPERATIONAL_COMPLEXITY,
    ROUND((
    (0.25 * 
    ROUND(CASE WHEN MINIMUM_TURN_MINUTES IS NULL OR MINIMUM_TURN_MINUTES <= 0 THEN 0
		ELSE LEAST(1,
           GREATEST(0, (MINIMUM_TURN_MINUTES - LEAST(COALESCE(SCHEDULED_GROUND_TIME_MINUTES,0), COALESCE(ACTUAL_GROUND_TIME_MINUTES,0))) / MINIMUM_TURN_MINUTES))
	END, 2)) + 
    (0.25 * 
    ROUND(((0.4 * (HOT_TRANSFER_BAGGAGE/TOTAL_BAGS)) + (0.2 * (TRANSFER_BAGGAGE/TOTAL_BAGS)) + (0.4 * ((TOTAL_BAGS - EARLY_CHECKIN)/TOTAL_BAGS))), 2)) + 
    (0.25 *
    ROUND(((COALESCE(PEOPLE_OPTED_FOR_AIRPORT_WHEELCHAIR, 0) + COALESCE(PEOPLE_OPTED_FOR_UNACCOMPANIED_MINOR, 0) + 
    COALESCE(PEOPLE_OPTED_FOR_MANUAL_WHEELCHAIR, 0) + COALESCE(PEOPLE_OPTED_FOR_ELECTRIC_WHEELCHAIR, 0))/TOTAL_PASSENGERS), 2)) + 
    (0.25 * 
    ROUND(LEAST(1, GREATEST(0, departure_delay_minutes / 60)), 2))), 2) AS FLIGHT_DIFFICULTY_SCORE
FROM FLIGHT_LEVEL_DATA AS FL
LEFT JOIN (
	SELECT BT_FLIGHT_NUMBER, BT_SCHEDULED_DEPARTURE_LOCAL, BT_SCHEDULED_ARRIVAL_STATION,
		COUNT(*) AS TOTAL_BAGS, 
		SUM(CASE WHEN BAG_TYPE = 'Transfer' THEN 1 ELSE 0 END) AS TRANSFER_BAGGAGE,
		SUM(CASE WHEN BAG_TYPE = 'Origin' THEN 1 ELSE 0 END) AS ORIGIN_BAGGAGE,
		SUM(CASE WHEN BAG_TYPE = 'Hot Transfer' THEN 1 ELSE 0 END) AS HOT_TRANSFER_BAGGAGE, 
		SUM(CASE WHEN CHECKIN_TIME_BEFORE_DEPARTURE_INDAYS >= 1 THEN 1 ELSE 0 END) AS EARLY_CHECKIN
	FROM bag_tag_final
	GROUP BY BT_FLIGHT_NUMBER, BT_SCHEDULED_DEPARTURE_LOCAL, BT_SCHEDULED_ARRIVAL_STATION
) AS BT ON 
	FL.FLIGHT_NUMBER = BT.BT_FLIGHT_NUMBER AND 
	FL.SCHEDULED_DEPARTURE_DATE_LOCAL = BT.BT_SCHEDULED_DEPARTURE_LOCAL AND 
	FL.SCHEDULED_ARRIVAL_STATION_CODE = BT.BT_SCHEDULED_ARRIVAL_STATION
LEFT JOIN (
	SELECT PF_FLIGHT_NUMBER, PF_SCHEDULED_DEPARTURE_DATE, PF_SCHEDULED_ARRIVAL_STATION, 
		COUNT(*) AS TOTAL_PASSENGERS, 
		SUM(LAP_CHILD_COUNT) AS TOTAL_LAP_CHILD, 
		SUM(CASE WHEN BASIC_ECONOMY_IND = 'Y' THEN 1 ELSE 0 END) AS TOTAL_BASIC_ECONOMY,
		SUM(CASE WHEN IS_STROLLER_USER = 'Y' THEN 1 ELSE 0 END) AS TOTAL_STROLLER_USERS,
		ROUND(AVG(DAYS_IN_ADVANCE)) AS AVG_ADVANCE_BOOKING,
		SUM(CASE WHEN DAYS_IN_ADVANCE <= 3 THEN 1 ELSE 0 END) AS LAST_MOMENT_BOOKINGS,
     	SUM(CASE WHEN AWCHR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_AIRPORT_WHEELCHAIR, 
      	SUM(CASE WHEN UAMR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_UNACCOMPANIED_MINOR,
      	SUM(CASE WHEN MWCHR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_MANUAL_WHEELCHAIR,
      	SUM(CASE WHEN EWCHR = 'Y' THEN 1 ELSE 0 END) AS PEOPLE_OPTED_FOR_ELECTRIC_WHEELCHAIR
	FROM CLEANED_PNR_FLIGHT
	GROUP BY PF_FLIGHT_NUMBER, PF_SCHEDULED_DEPARTURE_DATE, PF_SCHEDULED_ARRIVAL_STATION
) AS PF ON
	FL.FLIGHT_NUMBER = PF.PF_FLIGHT_NUMBER AND 
	FL.SCHEDULED_DEPARTURE_DATE_LOCAL = PF.PF_SCHEDULED_DEPARTURE_DATE AND 
	FL.SCHEDULED_ARRIVAL_STATION_CODE = PF.PF_SCHEDULED_ARRIVAL_STATION
LEFT JOIN `airports data` AS AD ON FL.SCHEDULED_ARRIVAL_STATION_CODE = AD.Airport_IATA_Code;

-- TO IMPORT THE ABOVE MADE TABLE - FINAL TABLE WITH ALL THE COMBINED DATA
CREATE TABLE FINAL_DATA (
    company_id VARCHAR(10),
    flight_number VARCHAR(20),
    scheduled_departure_date_local DATE,
    scheduled_departure_station_code VARCHAR(10),
    scheduled_arrival_station_code VARCHAR(10),
    scheduled_departure_datetime_local DATETIME,
    scheduled_arrival_datetime_local DATETIME,
    actual_departure_datetime_local DATETIME,
    actual_arrival_datetime_local DATETIME,
    total_seats INT,
    fleet_type VARCHAR(50),
    carrier VARCHAR(50),
    scheduled_ground_time_minutes INT,
    actual_ground_time_minutes INT,
    minimum_turn_minutes INT,
    scheduled_departure_time VARCHAR(10),
    scheduled_arrival_date_local DATE,
    scheduled_arrival_time_local VARCHAR(10),
    actual_departure_date_local DATE,
    actual_departure_time_local VARCHAR(10),
    actual_arrival_date_local DATE,
    actual_arrival_time_local VARCHAR(10),
    departure_delay_minutes INT,
    arrival_delay_minutes INT,
    ground_time_diff INT,
    ground_time_margin INT,
    turn_time_violation_flag VARCHAR(5),
    BT_FLIGHT_NUMBER VARCHAR(20),
    BT_SCHEDULED_DEPARTURE_LOCAL DATETIME,
    BT_SCHEDULED_ARRIVAL_STATION VARCHAR(10),
    TOTAL_BAGS INT,
    TRANSFER_BAGGAGE INT,
    ORIGIN_BAGGAGE INT,
    HOT_TRANSFER_BAGGAGE INT,
    EARLY_CHECKIN INT,
    PF_FLIGHT_NUMBER VARCHAR(20),
    PF_SCHEDULED_DEPARTURE_DATE DATE,
    PF_SCHEDULED_ARRIVAL_STATION VARCHAR(10),
    TOTAL_PASSENGERS INT,
    TOTAL_LAP_CHILD INT,
    TOTAL_BASIC_ECONOMY INT,
    TOTAL_STROLLER_USERS INT,
    AVG_ADVANCE_BOOKING FLOAT,
    LAST_MOMENT_BOOKINGS INT,
    PEOPLE_OPTED_FOR_AIRPORT_WHEELCHAIR INT,
    PEOPLE_OPTED_FOR_UNACCOMPANIED_MINOR INT,
    PEOPLE_OPTED_FOR_MANUAL_WHEELCHAIR INT,
    PEOPLE_OPTED_FOR_ELECTRIC_WHEELCHAIR INT,
    Airport_IATA_Code VARCHAR(10),
    ISO_Country_Code VARCHAR(10),
    GROUND_TIME_SCORE FLOAT,
    BAGGAGE_SCORE FLOAT,
    PASSENGER_SERVICE_SCORE FLOAT,
    OPERATIONAL_COMPLEXITY FLOAT,
    FLIGHT_DIFFICULTY_SCORE FLOAT
);

LOAD DATA INFILE 'C:/Users/kumar/Downloads/FINAL_DATA.csv'
INTO TABLE FINAL_DATA
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

-- TO RANK THE DATA FOR EACH DAY, ACCORDING TO FLIGHT DIFFICULTY SCORE, 1ST RANK BEING THE MOST DIFFICULT
SELECT
  RANK() OVER(
    PARTITION BY SCHEDULED_DEPARTURE_DATE_LOCAL
    ORDER BY FLIGHT_DIFFICULTY_SCORE DESC
  ) AS FLIGHT_RANK,
  fd.*
FROM FINAL_DATA fd
ORDER BY SCHEDULED_DEPARTURE_DATE_LOCAL, FLIGHT_RANK;
